{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7fde6170-6485-44ab-b471-54a43333c32c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bhumi Movie Prediction Results:\n",
      "Movie: {'Genre': 'Action', 'Director': 'Director A', 'Lead Actor': 'Actor X'} | Predicted Rating: 7.50\n",
      "Movie: {'Genre': 'Comedy', 'Director': 'Director B', 'Lead Actor': 'Actor Y'} | Predicted Rating: 6.80\n"
     ]
    }
   ],
   "source": [
    "# Bhumi Movie Prediction\n",
    "# Simple Movie Rating Prediction Model\n",
    "\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.pipeline import Pipeline\n",
    "\n",
    "# Sample Dataset (you can replace it with a CSV file later)\n",
    "data = {\n",
    "    'Genre': ['Action', 'Comedy', 'Drama', 'Action', 'Comedy', 'Drama'],\n",
    "    'Director': ['Director A', 'Director B', 'Director C', 'Director A', 'Director B', 'Director C'],\n",
    "    'Lead Actor': ['Actor X', 'Actor Y', 'Actor Z', 'Actor X', 'Actor Y', 'Actor Z'],\n",
    "    'Rating': [7.8, 6.5, 8.2, 7.5, 6.8, 8.0]\n",
    "}\n",
    "\n",
    "# Create DataFrame\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Features and target\n",
    "X = df[['Genre', 'Director', 'Lead Actor']]\n",
    "y = df['Rating']\n",
    "\n",
    "# Preprocessing for categorical data\n",
    "preprocessor = ColumnTransformer(\n",
    "    transformers=[\n",
    "        ('cat', OneHotEncoder(), ['Genre', 'Director', 'Lead Actor'])\n",
    "    ])\n",
    "\n",
    "# Create a simple pipeline\n",
    "model = Pipeline(steps=[\n",
    "    ('preprocessor', preprocessor),\n",
    "    ('regressor', LinearRegression())\n",
    "])\n",
    "\n",
    "# Split data\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Train the model\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Predict on test set\n",
    "predictions = model.predict(X_test)\n",
    "\n",
    "# Show predictions\n",
    "print(\"Bhumi Movie Prediction Results:\")\n",
    "for i in range(len(X_test)):\n",
    "    print(f\"Movie: {X_test.iloc[i].to_dict()} | Predicted Rating: {predictions[i]:.2f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "af14e73f-5a38-4f13-8cb9-8945aa061995",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
